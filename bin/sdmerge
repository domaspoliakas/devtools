#!/usr/bin/env python3
import sys
import subprocess
import re
import tempfile
import http.client
import json
import os
import shutil
import base64
from builtins import str
from collections import OrderedDict
from subprocess import CalledProcessError

# Takes one or two arguments - an optional GitHub repository name and a PR number.
# If the repository name is unspecified, it will be inferred (if possible) from
# the `upstream` remote of the git repository in the current working directory.
# To access PR in private repository it needs GITHUB_TOKEN env variable set.
#
# This script ensures the PR is unmerged and has a one of the
# "version:" GitHub labels applied to it (the name is used to determine which
# version component to increment).
#
# Pre-1.0 projects are supported (i.e. those with a version of 0.x.y) and
# breaking changes will result in the minor version being incremented and any
# other change will increment the patch version.
#
# When the pre-1.0 API has reached stability and is ready to release, use the
# "version: release" label, which will transition the version to 1.0.0.
#
# It increments the version, copies the PR title and description to the merge
# commit, and merges into master.

UPSTREAM = 'upstream'  # the default upstream remote name (used if only one argument is specified)
DEPTH = 100            # number of commits to fetch from upstream


def help():
    print("""usage: {0} [-h] [REPO-NAME] PR-NUMBER

Merge a cloned repo to REPO-NAME with PR-NUMBER. Github keys should be exchanged before using {0}.
Instructions can be found here: https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account.
To fetch metadata of private repositories provide github api token through GITHUB_TOKEN env variable.
Lastly, ensure PR has a version label assigned to it.

-h            help (also trigged with no parameters): display this help and exit
<REPO-NAME>   the repo name, for example: quasar-analytics/quasar
<PR-NUMBER>   the pull request number: 2030

Example: sdmerge quasar-analytics/quasar 2030""".format(sys.argv[0]))
    exit(1)


def infer_repo_slug():
    out = subprocess.check_output(["git", "remote", "-v"])
    upstream_fetch_regex = "^" + re.escape(UPSTREAM) + r"\t(?:git@github\.com:|https://github\.com/)(.+?)(?:.git)? \(fetch\)$"
    match = re.compile(upstream_fetch_regex, re.MULTILINE).search(out.decode('utf-8'))
    if match is None:
        print("error: unable to determine current working repository (do you have a remote named '%s'?)" % UPSTREAM)
        exit(1)
    else:
        return match.group(1)


def call_github_api(url, token):
    conn = http.client.HTTPSConnection("api.github.com")

    headers = {"User-Agent": "sdmerge"}  # user agent is required by github api
    if token is not None:
        headers.update({"Authorization": "token " + token})

    conn.request("GET", url, headers=headers)
    response = conn.getresponse()
    if response.status != 200:
        if response.status == 403 and token is None:
            print("error: set GITHUB_TOKEN env variable to access private repositories")
        elif response.status == 404:
            print("error: pull request with this number does not exist")
            if token is None:
                print("error: if you are trying to access private repository make sure that GITHUB_TOKEN is set")
        else:
            print("error: invalid response: ", response.status, response.reason)
            print(response.read())
        conn.close()
        exit(1)
    else:
        raw_data = response.read()
        conn.close()
        return json.loads(raw_data.decode('utf-8'))


def get_pr_metadata():
    github_token = os.environ.get("GITHUB_TOKEN")
    endpoint = "/repos/%s/pulls/%s" % (repo_slug, pull_request_number)
    return call_github_api(endpoint, github_token)


def read_sbt_version():
    with open("version.sbt") as file:
        content = file.read()
        match = re.match(r"ThisBuild / version := \"(.+)\"", content)

        if match is None:
            # Try the previous format
            return re.match(r"version in ThisBuild := \"(.+)\"", content).group(1)
        else:
            return match.group(1)


def read_npm_version():
    with open("package.json") as file:
        return json.load(file)["version"].replace("v", "")

def read_installer_version():
    with open("release-version.json") as file:
        return json.load(file)["version"]


def save_sbt_version(version):
    with open("version.sbt", "w") as file:
        file.write("ThisBuild / version := \"%s\"\n" % version)


def save_npm_version(version):
    with open("package.json") as file:
        content = json.load(file, object_pairs_hook=OrderedDict)

    content["version"] = "v" + version

    with open("package.json", "w") as file:
        json.dump(content, file, indent=2, separators=(',', ': '))

def save_installer_version(version):
    with open("release-version.json") as file:
        content = json.load(file, object_pairs_hook=OrderedDict)

    content["version"] = version
    content["marketplace"] = False

    with open("release-version.json", "w") as file:
        json.dump(content, file, indent=2, separators=(',', ': '))

def write_installer_aws_flag():
    with open("release-version.json") as file:
        content = json.load(file, object_pairs_hook=OrderedDict)

    content["marketplace"] = True

    with open("release-version.json", "w") as file:
        json.dump(content, file, indent=2, separators=(',', ': '))


def resolve_version_file_type():
    if os.path.exists("version.sbt"):
        return read_sbt_version, save_sbt_version
    elif os.path.exists("package.json"):
        return read_npm_version, save_npm_version
    elif os.path.exists("release-version.json"):
        return read_installer_version, save_installer_version
    else:
        print("error: unable to determine project version file. Expected to find one of those: version.sbt, package.json, release-version.json")
        exit(1)


def bump_version_file():
    major = 0
    minor = 1
    patch = 2

    def bump(version, component):
        version[component] += 1
        for i in range(component + 1, len(version)):
            version[i] = 0

    def is_unreleased(v):
        return v[major] == 0

    def parse_version(s):
        return list(map(int, s.split(".")))

    def stringify_version(v):
        return ".".join(map(str, v))

    read_version, save_version = resolve_version_file_type()

    version = parse_version(read_version())
    if "version: breaking" in pr_labels:
        if is_unreleased(version):
            bump(version, minor)
        else:
            bump(version, major)
    elif "version: feature" in pr_labels:
        if is_unreleased(version):
            bump(version, patch)
        else:
            bump(version, minor)
    elif "version: revision" in pr_labels:
        bump(version, patch)
    elif "version: release" in pr_labels:
        if is_unreleased(version):
            version = [1, 0, 0]
        else:
            print("error: current version (%s) must be < 1.0.0 to release" % stringify_version(version))
            exit(1)
    else:
        print("error: Missing a semantic version label on the PR.")
        exit(1)

    new_version_str = stringify_version(version)
    save_version(new_version_str)

    if "marketplace" in pr_labels:
        write_installer_aws_flag()

    return new_version_str

def slugify(value):
    """
    Normalizes string, converts to lowercase, removes non-alpha characters,
    and converts spaces to hyphens.
    """
    import unicodedata
    value = unicodedata.normalize('NFKD', value).encode('ascii', 'ignore').decode('ascii')
    value = str(re.sub('[^\w\s-]', '', value).strip().lower())
    value = str(re.sub('[-\s]+', '-', value))
    return value


in_local = False

if len(sys.argv) == 3:
    repo_slug = sys.argv[1]
    pull_request_number = sys.argv[2]
elif len(sys.argv) == 2:
    repo_slug = infer_repo_slug()
    pull_request_number = sys.argv[1]
    in_local = True
else:
    help()


pr_data = get_pr_metadata()
pr_submitter = pr_data["user"]["login"]
pr_branch = pr_data["head"]["ref"]
pr_base_branch = pr_data["base"]["ref"]
pr_base_name = pr_data["base"]["repo"]["full_name"]
pr_base_repo = "https://%s@github.com/%s.git" % (os.environ.get("GITHUB_TOKEN"), pr_base_name)
pr_title = pr_data["title"]
pr_labels = [x["name"] for x in pr_data["labels"]]

if pr_data["body"] != None:
    pr_changelog = pr_data["body"].replace("\r\n", "\n")
else:
    pr_changelog = ""

pr_is_merged = pr_data["merged"]

if pr_is_merged:
    print("error: %s#%s has already been merged" % (repo_slug, pull_request_number))
    exit(1)

if ":stop_sign:" in pr_labels:
    print("error: PR %s#%s is marked as ðŸ›‘ and cannot be merged" % (repo_slug, pull_request_number))
    exit(1)


clone_directory = tempfile.mkdtemp(prefix="/tmp/precog-merge.")

try:
    # merge PR
    if in_local:
        subprocess.check_call(["git", "clone", os.getcwd(), clone_directory])
        os.chdir(clone_directory)
        subprocess.check_call(["git", "remote", "rm", "origin"])
        subprocess.check_call(["git", "remote", "add", "origin", pr_base_repo])
        subprocess.check_call(["git", "fetch", "--depth", str(DEPTH), "origin"])
    else:
        subprocess.check_call(["git", "clone", "--depth", str(DEPTH), pr_base_repo, clone_directory])
        os.chdir(clone_directory)

    temporary_branch = slugify(pr_submitter + "-" + pr_branch)
    while True:
        try:
            subprocess.check_call(["git", "fetch", "origin", "pull/%s/head:%s" % (pull_request_number, temporary_branch)])
        except CalledProcessError:
            # Safe encoding
            safe_branch = base64.urlsafe_b64encode((pr_submitter + "-" + pr_branch).encode()).decode('ascii')
            if safe_branch == temporary_branch:
                raise
            else:
                print("slugify failed, using base64 encoding\nOriginal: %s\nSlugify: %s\nBase64: %s"
                        % (pr_submitter + "-" + pr_branch, temporary_branch, safe_branch))
            temporary_branch = safe_branch
            continue
        break

    if pr_base_branch != "master" and pr_base_branch != "main":
        subprocess.check_call(["git", "fetch", "origin", "%s:%s" % (pr_base_branch, pr_base_branch)])

    subprocess.check_call(["git", "checkout", pr_base_branch])
    subprocess.check_call(["git", "reset", "--hard", "origin/%s" % pr_base_branch])

    subprocess.check_call(["git", "merge", "--no-ff", "--no-edit", temporary_branch])

    # add version bump to the commit
    new_version = bump_version_file()
    subprocess.check_call([
        "git", "commit", "-a", "--amend",
        "-m", "%s: %s" % (new_version, pr_title),
        "-m", pr_changelog
    ])

    # push changes
    subprocess.check_call(["git", "push", "origin", pr_base_branch])
finally:
    shutil.rmtree(clone_directory)

print("success: %s#%s has version %s in %s" % (repo_slug, pull_request_number, new_version, pr_base_branch))
